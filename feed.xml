<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://lankudot.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lankudot.github.io/" rel="alternate" type="text/html" /><updated>2022-02-05T14:36:50+08:00</updated><id>https://lankudot.github.io/feed.xml</id><title type="html">烏龜漫遊 2.0</title><subtitle>記錄分享在 Unity 上製作遊戲的筆記與心得</subtitle><author><name>烏龜</name></author><entry><title type="html">[雜談] 身為工具開發者的二三事</title><link href="https://lankudot.github.io/blog/2022-01-advice-for-tool-developers/" rel="alternate" type="text/html" title="[雜談] 身為工具開發者的二三事" /><published>2022-01-16T00:00:00+08:00</published><updated>2022-01-16T00:00:00+08:00</updated><id>https://lankudot.github.io/blog/advice-for-tool-developers</id><content type="html" xml:base="https://lankudot.github.io/blog/2022-01-advice-for-tool-developers/">&lt;p&gt;最近終於有機會可以跟到大專案，而專案中有一人負責提供開發工具。為了方便進行 code review，所有成員要使用該工具。但沒有想到才剛使用一週，就遇上開發者大改架構，而且連個事前通知都沒有，一個禮拜的進度化為烏有。崩潰之餘只好來寫一下自己認知中，身為工具開發者時應該要有的觀念。&lt;/p&gt;

&lt;h2 id=&quot;提供文件&quot;&gt;提供文件&lt;/h2&gt;

&lt;p&gt;我知道如果工具還在開發中的話，撰寫文件會比較麻煩，因為只要工具一更新，文件就過時了。但是別忘記，可以多利用註解幫忙生成文件，而且只要符合對應的註解格式，IDE 或編輯器也會為工具的 API 加上提示，讓團隊成員能了解函式或變數的用途。工具完成後也可以用 doxygen 等工具生成 API 文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2022-01-16-advice-for-tool-developers/comment-documentation.PNG&quot; alt=&quot;文件註解範例&quot; /&gt;
&lt;em&gt;例如 C# 可以&lt;a href=&quot;https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/documentation-comments&quot; title=&quot;C# 文件註解 - Microsoft Documentation&quot;&gt;使用 xml 格式&lt;/a&gt;的註解，配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;///&lt;/code&gt; 或是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/**&lt;/code&gt; 來撰寫文件註解，而 Visual Studio 就會為函式加上提示&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;提供範例&quot;&gt;提供範例&lt;/h2&gt;

&lt;p&gt;範例是說明工具如何使用最有效的手段。每個範例最好只介紹一個功能，配合常見的使用情況，例如：如何發出事件，就用 UI 的按鈕做為例子、如何生成一個物件，就用生成敵人做為例子。除了能夠讓團隊成員容易理解如何使用這個工具，也可以用來驗證自己的設計是否合理，以及測試功能是否正常。&lt;/p&gt;

&lt;h2 id=&quot;記錄版本與修改&quot;&gt;記錄版本與修改&lt;/h2&gt;

&lt;p&gt;API 更動時常發生，最好能夠用版本來區分改動，並且記錄 changelog。而不是讓團隊成員在合併分支時，才知道工具又更新了，然後伴隨各種崩慣的錯誤訊息。&lt;/p&gt;

&lt;p&gt;使用者可以利用版本號確認自己是否使用最新的工具。我習慣 &lt;a href=&quot;https://medium.com/fiverr-engineering/major-minor-patch-a5298e2e1798&quot; title=&quot;Major.Minor.Patch - An illustrated guide to semantic versioning&quot;&gt;「Major.Minor.Patch」&lt;/a&gt; 的格式，只是修正錯誤就增加 Patch 的數字，增加一些功能就增加 Minor 的數字，如果這次的更新會造成使用舊版工具的程式出錯的話，就增加 Major 的數字。要注意的是，對於 Minor 跟 Patch 的版本變更，都應該要相容前面的版本，即不會因更新而報錯。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2022-01-16-advice-for-tool-developers/version-explain.png&quot; alt=&quot;版本號說明&quot; /&gt;
&lt;em&gt;版本號的簡單說明&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;而 changelog 應該忠實記錄每個版本做了哪些修改，讓團隊成員能夠知道如何修正程式以跟上最新版本。我覺得 &lt;a href=&quot;https://keepachangelog.com/en/1.0.0/&quot; title=&quot;Keep a Changelog&quot;&gt;changelog&lt;/a&gt; 至少需要包含增加（Added）、刪去（Removed）、改動（Changed）、修正（Fixed）這幾項記錄。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2022-01-16-advice-for-tool-developers/changelog-example.PNG&quot; alt=&quot;Changelog 範例&quot; /&gt;
&lt;em&gt;之前開發的工具所維護的 &lt;a href=&quot;https://github.com/LanKuDot/MLGame/blob/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;開個會吧&quot;&gt;開個會吧&lt;/h2&gt;

&lt;p&gt;如果真的沒有時間可以維護這些文件，那至少集合大家開個會，花個半小時講解一下工具有什麼更新及如何使用。還可以順便收集大家的使用意見，為下一次更新作準備。&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;如果範例跟文件都有提供的話，我想團隊開發上也會比較流暢，就不用一直詢問什麼功能要怎麼用，耗時又耗神。而且使用者上手後也能夠提供更好的建議。&lt;/p&gt;</content><author><name>烏龜</name></author><category term="blog" /><category term="雜談" /><summary type="html">最近終於有機會可以跟到大專案，而專案中有一人負責提供開發工具。為了方便進行 code review，所有成員要使用該工具。但沒有想到才剛使用一週，就遇上開發者大改架構，而且連個事前通知都沒有，一個禮拜的進度化為烏有。崩潰之餘只好來寫一下自己認知中，身為工具開發者時應該要有的觀念。</summary></entry><entry><title type="html">[心得] 轉換到嘸蝦米半年心得</title><link href="https://lankudot.github.io/blog/2021-12-switch-to-boshiamy/" rel="alternate" type="text/html" title="[心得] 轉換到嘸蝦米半年心得" /><published>2021-12-19T00:00:00+08:00</published><updated>2021-12-19T00:00:00+08:00</updated><id>https://lankudot.github.io/blog/switch-to-boshiamy</id><content type="html" xml:base="https://lankudot.github.io/blog/2021-12-switch-to-boshiamy/">&lt;p&gt;在受不了輸入法神奇的選字跟換了沒有方向鍵的 60% 鍵盤的因素下，決定學習新的輸入法，享受不用選字的爽感。在以字形為主的輸入法中，最後選擇嘸蝦米，這篇分享學習方法與使用半年的心得。&lt;/p&gt;

&lt;h2 id=&quot;為何選擇嘸蝦米&quot;&gt;為何選擇嘸蝦米&lt;/h2&gt;

&lt;p&gt;在挑選輸入法時，也有考慮過倉頡跟行列，但最後選擇嘸蝦米的原因是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;聯想直覺：嘸蝦米將字形拆解成字根，而字根以形、音或義與英文字母做連結&lt;/li&gt;
  &lt;li&gt;不用記鍵盤配置：因為以英文字母做為輸入，所以不用再學鍵盤配置，而且對英打也有幫助&lt;/li&gt;
  &lt;li&gt;完整學習資源：官網有完整的學習資源，從字根練習、拼字練習、文章測驗，到查字碼應有盡有&lt;/li&gt;
  &lt;li&gt;幾乎不用選字：即使以字形為主，還是會遇到需要選字的情況，但嘸蝦米需要選字的機會非常小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;綜合以上四點，以及因為寫程式，而對英打有一定熟悉度，我覺得嘸蝦米是可以快速上手的輸入法。&lt;/p&gt;

&lt;h2 id=&quot;簡介嘸蝦米&quot;&gt;簡介嘸蝦米&lt;/h2&gt;

&lt;h3 id=&quot;字根&quot;&gt;字根&lt;/h3&gt;

&lt;p&gt;嘸蝦米將字根以形、音或義與對應的英文字母聯想在一起：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;形：取字根的外形，如：「口」→「O」、「冊」→「M」&lt;/li&gt;
  &lt;li&gt;音：取字根的讀音，如：「大」→「D」、「耳」→「R」&lt;/li&gt;
  &lt;li&gt;義：取字根對應的英文單字，如：「車」→「Car」→「C」、「斤」→「Kilogram」→「K」&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;拆字&quot;&gt;拆字&lt;/h3&gt;

&lt;p&gt;基本上一個字的拆解原則是：由上而下，由左而右，由外而內，也就是以眼睛看到的順序為主，如下面的例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/word-root-example.PNG&quot; alt=&quot;拆字例子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;紅色代表形，藍色代表音，綠色代表義。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「部」可以拆為「立」「口」「阝」，所以字碼是「LOB」&lt;/li&gt;
  &lt;li&gt;「圓」可以拆為「囗」「口」「目」「八」，所以字碼是「OOMB」&lt;/li&gt;
  &lt;li&gt;「新」可以拆為「立」「木」「斤」，所以字碼是「LTK」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更詳細的拆字原則請參考&lt;a href=&quot;https://boshiamy.com/tutorial_beginner.php?page=4&quot;&gt;官網&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;大根原則&quot;&gt;大根原則&lt;/h3&gt;

&lt;p&gt;即盡可能的以最大的字根涵蓋字形。例如「立」雖然可以被拆為「亠」「八」「一」三個字根，但是「立」也是一個字根，所以在上面的「部」字的拆解上不會是「亠」「八」「一」「口」「阝」。&lt;/p&gt;

&lt;p&gt;除了基礎字根外，嘸蝦米還有「簡速字根」把基礎字根組合成更大的字根，進而減少要輸入的字碼。&lt;/p&gt;

&lt;h3 id=&quot;截長補短&quot;&gt;截長補短&lt;/h3&gt;

&lt;p&gt;「截長」意為當一個字需要四個以上的字根組成時，取前三個加上最後一個做為其字碼：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/more-than-four-example.PNG&quot; alt=&quot;截長例子&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「優」取前三個「亻」「T」「目」及最後一個「夂」，「冖」「心」省略，所以字碼為「PTMP」&lt;/li&gt;
  &lt;li&gt;「腳」取前三個「⺼」「八」「八」及最後一個「卩」，「口」省略，所以字碼為「UBBP」&lt;/li&gt;
  &lt;li&gt;「靈」取前三個「雨」「口」「口」及最後一個「巫」，「口」省略，所以字碼為「UOOW」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「補短」則是當字碼不足三個時，要再補「最後一筆」的根：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/fill-root-example.PNG&quot; alt=&quot;補短例子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;加上官網的補根定義：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://boshiamy.com/images/root_end.jpg&quot; alt=&quot;補根定義&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「方」只有一個字根「方」，需補根，所以字碼為「FY」&lt;/li&gt;
  &lt;li&gt;「來」只有一個字根「來」，需補根，所以字碼為「LN」&lt;/li&gt;
  &lt;li&gt;「問」只有兩個字根「門」「口」，需補根，所以字碼為「MOO」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細的截長補短原則詳見&lt;a href=&quot;https://boshiamy.com/tutorial_beginner.php?page=4#tab_tab2&quot;&gt;官網&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;一二碼字與簡速字根&quot;&gt;一二碼字與簡速字根&lt;/h3&gt;

&lt;p&gt;這是嘸蝦米為了減少輸入的字碼數而設計的，讓輸入過程更快，算進階版，在學會基礎字根後會比較好理解。&lt;/p&gt;

&lt;h4 id=&quot;一碼字&quot;&gt;一碼字&lt;/h4&gt;

&lt;p&gt;雖然只有一個字根的字都要補根成為二碼字，但也有只要一個字碼就可以打出來的字，稱為「一碼字」。小寫數字（一到十，加上○）即為此類，另外還有常用的字組成剩下的 15 個一碼字。如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「一」的字碼是「E」&lt;/li&gt;
  &lt;li&gt;「對」的字碼是「A」&lt;/li&gt;
  &lt;li&gt;「有」的字碼是「X」&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;二碼字&quot;&gt;二碼字&lt;/h4&gt;

&lt;p&gt;而二碼字除了因補根而成的之外，還有為了減少輸入字根數而成的，一共 26 乘 26 個。如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「說」的字碼是「IBOR」，但打「IR」也可以&lt;/li&gt;
  &lt;li&gt;「想」的字碼是「TMH」，但打「TH」也可以&lt;/li&gt;
  &lt;li&gt;「資」的字碼是「BIMB」，但打「BB」也可以&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;簡速字根&quot;&gt;簡速字根&lt;/h4&gt;

&lt;p&gt;簡速字根則是將基礎字根併成更大的字根，除了比較好判斷字根，也減少需要輸入四個字碼的機會。如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「就」的字碼是「LOSK」，但它也是一個簡速字根「G」，所以只要再補根成「GL」&lt;/li&gt;
  &lt;li&gt;「做」的字碼是「PLOP」，但「故」是一個簡速字根「J」，所以它也可以用「PJ」再補根成「PJX」&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;學習方式&quot;&gt;學習方式&lt;/h2&gt;

&lt;p&gt;我的學習方式可以分成三個階段：記字根 → 嘸蝦米併用 → 完全使用嘸蝦米。&lt;/p&gt;

&lt;h3 id=&quot;記字根&quot;&gt;記字根&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://boshiamy.com/cai.php&quot;&gt;官網&lt;/a&gt;有提供學習資源相當方便，我學習都是使用官網的工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/learn-boshiamy-homepage.PNG&quot; alt=&quot;嘸蝦米學習首頁&quot; /&gt;&lt;/p&gt;

&lt;p&gt;教學網頁將字根分成一個一個章節，章節會隨機排列字根出現的順序。每個字根都會有例字，有些會有提示，答錯的字根還會幫忙整理起來。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/learn-root-example.PNG&quot; alt=&quot;字根頁面範例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我從第一個章節開始，每天練習同一個章節，等覺得一個章節的字根都熟悉之後，就練下一個。但練新的章節時，還是會先複習前一個章節，跟對應的單字練習。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/word-practice-example.PNG&quot; alt=&quot;單字練習範例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在對字根有一定的概念後，就開始作文章練習，裡面的文字都是常用字，使用文章練習會對文字的拆解更有概念。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/article-practice-example.PNG&quot; alt=&quot;文章練習範例&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用嘸蝦米&quot;&gt;使用嘸蝦米&lt;/h3&gt;

&lt;p&gt;其實我在跑完英文字根的章節後，就開始使用嘸蝦米了，並沒有等全熟才開始。一開始先在做筆記上使用，平常打字對話也會，但如果是跟人討論事情，我還是先會用注音輪入法。&lt;/p&gt;

&lt;p&gt;最後跑完基礎字根後，就完全用嘸蝦米輸入了。在學習半年之後，現在開始在記簡速字根。學習方式與基礎字根一樣。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/quick-root-learn-example.PNG&quot; alt=&quot;簡速字根學習範例&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;查字碼&quot;&gt;查字碼&lt;/h3&gt;

&lt;p&gt;如果遇到不會的字，輸入法也提供查尋的功能，按下「’;」，就可以用注音輸入，找到該字的字碼。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/search-word.png&quot; alt=&quot;輸入法查字碼&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外官網上也可以&lt;a href=&quot;https://boshiamy.com/liuquery.php&quot;&gt;查字碼&lt;/a&gt;，我會找常遇到的四碼字有沒有更簡單的字碼，藉此記下二碼字。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-19-switch-to-boshiamy/search-root.PNG&quot; alt=&quot;網頁查字碼&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;困難點&quot;&gt;困難點&lt;/h3&gt;

&lt;p&gt;在學習上當然會遇到困難。有些字根的聯想沒有那麼直覺，如：「乃」就形來說，我直覺想到是「B」，但它是「R」。音似的字根更容易遇到，如：「夾」跟「臼」是「G」，但同樣是「ㄐ」發音的「井」跟「夬（決）」是「J」。花了很多時間才記下來，我想大概是為了盡量不要有重複的字碼，才會這樣設計的吧。&lt;/p&gt;

&lt;p&gt;另外一個是有些字碼的順序不是照筆順，如：「式」（AXI）的「丶」（A）是最後一畫，但以嘸蝦米是以眼順為主，所以「丶」是在第一碼。&lt;/p&gt;

&lt;p&gt;雖然在學習上有一些挫折，也有一部份的字根需要特別背，但我想比起要一直忍受神奇選字，這點不便可以接受。&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;在使用嘸蝦米之後，我覺得最有趣的是打字的觀點會不一樣，之前是想字的讀音，但是現在變成要想字的外形。一開始會卡卡的，但平常就有手寫筆記的習慣，所以在想字形時不會思考太久。&lt;/p&gt;

&lt;p&gt;學習半年後，在&lt;a href=&quot;https://typing.tw/&quot;&gt;中打測速&lt;/a&gt;使用十分鐘的測驗上是 30 WPM。我想用越久，越可以直接反應出文字的字碼。現在打字也順暢許多，一打就是想要的字，這點真令人高興。&lt;/p&gt;

&lt;h2 id=&quot;線上工具&quot;&gt;線上工具&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://boshiamy.com/cai.php&quot;&gt;學習資源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boshiamy.com/liuquery.php&quot;&gt;查字碼&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boshiamy.com/tutorial_beginner.php?page=3&quot;&gt;基礎字根表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boshiamy.com/tutorial_advance.php?page=1&quot;&gt;簡速字根表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boshiamy.com/tutorial_advance.php?page=2&quot;&gt;二碼字分類&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>烏龜</name></author><category term="blog" /><category term="心得" /><summary type="html">在受不了輸入法神奇的選字跟換了沒有方向鍵的 60% 鍵盤的因素下，決定學習新的輸入法，享受不用選字的爽感。在以字形為主的輸入法中，最後選擇嘸蝦米，這篇分享學習方法與使用半年的心得。</summary></entry><entry><title type="html">[筆記] 避免 Boxing/Unboxing 效能問題</title><link href="https://lankudot.github.io/blog/2021-12-csharp-boxing-and-unboxing/" rel="alternate" type="text/html" title="[筆記] 避免 Boxing/Unboxing 效能問題" /><published>2021-12-01T00:00:00+08:00</published><updated>2021-12-01T00:00:00+08:00</updated><id>https://lankudot.github.io/blog/csharp-boxing-and-unboxing</id><content type="html" xml:base="https://lankudot.github.io/blog/2021-12-csharp-boxing-and-unboxing/">&lt;p&gt;之前在撰寫 Unity 套件的時候，因為不知道使用者會用什麼類別來傳資料，所以都轉成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; 型別來傳遞，後來發現這會有效能上的問題。本篇文章就來探討這個問題以及解法。&lt;/p&gt;

&lt;h2 id=&quot;問題&quot;&gt;問題&lt;/h2&gt;

&lt;p&gt;根據&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing&quot;&gt;官方文件&lt;/a&gt;，在 value type（如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; 等）與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 之間轉換會有效能問題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果將一個 value type 轉成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 的話，C# 會額外在 heap 建立一個 instance 來儲存 value type 的值。這稱為 &lt;strong&gt;boxing&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;反之將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 轉回 value type 的話，C# 會先檢查該 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; 存的值（boxed value）是否可以轉到指定的 value type，然後將值複製回 value type。這稱為 &lt;strong&gt;unboxing&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下圖（參考官方文件繪製）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/2021-12-01-csharp-boxing-and-unboxing/boxing-unboxing.png&quot; alt=&quot;boxing-unboxing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再依&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/performance/performance-tips#boxing-and-unboxing&quot;&gt;這篇官方文件&lt;/a&gt;，boxing 比直接的 reference 賦值 &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 最多差 20 倍的效能，unboxing 則最多差 4 倍。&lt;/p&gt;

&lt;h2 id=&quot;解法&quot;&gt;解法&lt;/h2&gt;

&lt;p&gt;避免這種情況的解法是：建立一個資料類別來包裝要傳的值，並用這個類別的物件來傳遞。&lt;/p&gt;

&lt;h3 id=&quot;傳送方&quot;&gt;傳送方&lt;/h3&gt;

&lt;p&gt;第一個類別 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentBankA&lt;/code&gt; 會直接將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; 轉成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 傳出去，這會有 boxing 的情況發生：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentBankA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二個類別 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentBankB&lt;/code&gt; 則是將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; 先包在類別 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataWrapper&lt;/code&gt; 裡再傳出去：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentBankB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_dataWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_dataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataWrapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;取用方&quot;&gt;取用方&lt;/h3&gt;

&lt;p&gt;取用方也會依照傳送方使用對應的方式。第一個是類別是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentDisplayerA&lt;/code&gt;，它會直接將 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 轉回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;，這會有 unboxing 的情況發生：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentDisplayerA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentBankA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contentBank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contentBank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二個類別 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentDisplayerB&lt;/code&gt; 則是從收到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataWrapper&lt;/code&gt; 物件中取值：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentDisplayerB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentBankB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contentBank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contentBank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;效能測試&quot;&gt;效能測試&lt;/h2&gt;

&lt;h3 id=&quot;測試類別&quot;&gt;測試類別&lt;/h3&gt;

&lt;p&gt;建立一個測試類別來分別執行這兩個類別數次：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TesterA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDisplayerA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contentDisplayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loadTimes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_testIteration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalTicks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_testIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loadTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_contentDisplayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LoadContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;totalTicks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$&quot;Average &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalTicks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_testIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ticks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每一個測試會傳送與讀取資料十萬次，用 C# 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StopWatch&lt;/code&gt; 來記錄執行時間，執行十次後，取平均做為結果。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt; 與 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt; 一樣，只是是取用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentDisplayerB&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;設置起來會像這個樣子：&lt;br /&gt;
&lt;img src=&quot;/assets/images/blog/2021-12-01-csharp-boxing-and-unboxing/tester-setup.PNG&quot; alt=&quot;Tester setup&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;測試結果&quot;&gt;測試結果&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt; 是有 boxing/unboxing 的，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt; 是用一個資料類別物件傳的，其結果是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt;: Average 75541.1 ticks&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt;: Average 17795.3 ticks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到效能約差 4.5 倍。&lt;/p&gt;

&lt;h3 id=&quot;每次都建立資料類別物件&quot;&gt;每次都建立資料類別物件&lt;/h3&gt;

&lt;p&gt;要注意的是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContebtBankB&lt;/code&gt; 在使用資料類別傳送資料都是使用同一個物件。如果每次傳送都建立一個物件的話，其實就跟 boxing 的情況沒有兩樣了。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentBankB&lt;/code&gt; 長這樣：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentBankB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataWrapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果為：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt;: Average 78446.0 ticks&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt;: Average 77913.0 ticks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接著來測試傳送不同的資料。&lt;/p&gt;

&lt;h3 id=&quot;傳遞-struct&quot;&gt;傳遞 struct&lt;/h3&gt;

&lt;p&gt;struct 是 value type，所以轉換 struct 成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 也會遇到 boxing 的問題。例如有個 struct 是這樣：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;則執行結果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt;: Average 108210.3 ticks&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt;: Average 38747.1 ticks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效能差約 3 倍。&lt;/p&gt;

&lt;h3 id=&quot;傳遞-reference-type&quot;&gt;傳遞 reference type&lt;/h3&gt;

&lt;p&gt;如果傳遞的資料本來就是 reference type 的話，如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;、類別等。這邊用一個字串陣列：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_strings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果為：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterA&lt;/code&gt;: Average 26283.7 ticks&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt;: Average 31247.4 ticks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到因為都是 reference type，所以效能差不多。甚至 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TesterB&lt;/code&gt; 因為多一個資料類別的轉換而稍為慢一點。&lt;/p&gt;

&lt;h2 id=&quot;總結&quot;&gt;總結&lt;/h2&gt;

&lt;p&gt;如果有需要從 value type 轉成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 的情況，就用一個資料類別來攜帶要傳送的值，並在使用方取出使用。要注意的是因為用的都是同一個資料類別物件，使用方要避免直接改到該物件的內容。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;即 reference type 傳給另一個 reference type，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; type 也是 reference type &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>烏龜</name></author><category term="blog" /><category term="筆記" /><category term="Unity" /><category term="C#" /><summary type="html">之前在撰寫 Unity 套件的時候，因為不知道使用者會用什麼類別來傳資料，所以都轉成 object 型別來傳遞，後來發現這會有效能上的問題。本篇文章就來探討這個問題以及解法。</summary></entry></feed>