var store = [{
        "title": "[C#] 避免 Boxing/Unboxing 效能問題",
        "excerpt":"之前在撰寫 Unity 套件的時候，因為不知道使用者會用什麼類別來傳資料，所以都轉成 object 型別來傳遞，後來發現這會有效能上的問題。本篇文章就來探討這個問題以及解法。 問題 根據官方文件，在 value type（如：int、float 等）與 object type 之間轉換會有效能問題： 如果將一個 value type 轉成 object type 的話，C# 會額外在 heap 建立一個 instance 來儲存 value type 的值。這稱為 boxing。 反之將 object type 轉回 value type 的話，C# 會先檢查該 object 存的值（boxed value）是否可以轉到指定的 value type，然後將值複製回 value type。這稱為 unboxing。 如下圖（參考官方文件繪製）： 再依這篇官方文件，boxing 比直接的 reference 賦值...","categories": ["blog"],
        "tags": ["筆記","Unity","C#"],
        "url": "/blog/2021-12-csharp-boxing-and-unboxing/",
        "teaser": null
      },{
        "title": "[雜談] 轉換到嘸蝦米半年心得",
        "excerpt":"在受不了輸入法神奇的選字跟換了沒有方向鍵的 60% 鍵盤的因素下，決定學習新的輸入法，享受不用選字的爽感。在以字形為主的輸入法中，最後選擇嘸蝦米，這篇分享學習方法與使用半年的心得。 為何選擇嘸蝦米 在挑選輸入法時，也有考慮過倉頡跟行列，但最後選擇嘸蝦米的原因是： 聯想直覺：嘸蝦米將字形拆解成字根，而字根以形、音或義與英文字母做連結 不用記鍵盤配置：因為以英文字母做為輸入，所以不用再學鍵盤配置，而且對英打也有幫助 完整學習資源：官網有完整的學習資源，從字根練習、拼字練習、文章測驗，到查字碼應有盡有 幾乎不用選字：即使以字形為主，還是會遇到需要選字的情況，但嘸蝦米需要選字的機會非常小 綜合以上四點，以及因為寫程式，而對英打有一定熟悉度，我覺得嘸蝦米是可以快速上手的輸入法。 簡介嘸蝦米 字根 嘸蝦米將字根以形、音或義與對應的英文字母聯想在一起： 形：取字根的外形，如：「口」→「O」、「冊」→「M」 音：取字根的讀音，如：「大」→「D」、「耳」→「R」 義：取字根對應的英文單字，如：「車」→「Car」→「C」、「斤」→「Kilogram」→「K」 拆字 基本上一個字的拆解原則是：由上而下，由左而右，由外而內，也就是以眼睛看到的順序為主，如下面的例子： 紅色代表形，藍色代表音，綠色代表義。 「部」可以拆為「立」「口」「阝」，所以字碼是「LOB」 「圓」可以拆為「囗」「口」「目」「八」，所以字碼是「OOMB」 「新」可以拆為「立」「木」「斤」，所以字碼是「LTK」 更詳細的拆字原則請參考官網。 大根原則 即盡可能的以最大的字根涵蓋字形。例如「立」雖然可以被拆為「亠」「八」「一」三個字根，但是「立」也是一個字根，所以在上面的「部」字的拆解上不會是「亠」「八」「一」「口」「阝」。 除了基礎字根外，嘸蝦米還有「簡速字根」把基礎字根組合成更大的字根，進而減少要輸入的字碼。 截長補短 「截長」意為當一個字需要四個以上的字根組成時，取前三個加上最後一個做為其字碼： 「優」取前三個「亻」「T」「目」及最後一個「夂」，「冖」「心」省略，所以字碼為「PTMP」 「腳」取前三個「⺼」「八」「八」及最後一個「卩」，「口」省略，所以字碼為「UBBP」 「靈」取前三個「雨」「口」「口」及最後一個「巫」，「口」省略，所以字碼為「UOOW」 「補短」則是當字碼不足三個時，要再補「最後一筆」的根： 加上官網的補根定義： 「方」只有一個字根「方」，需補根，所以字碼為「FY」 「來」只有一個字根「來」，需補根，所以字碼為「LN」 「問」只有兩個字根「門」「口」，需補根，所以字碼為「MOO」 詳細的截長補短原則詳見官網。 一二碼字與簡速字根 這是嘸蝦米為了減少輸入的字碼數而設計的，讓輸入過程更快，算進階版，在學會基礎字根後會比較好理解。 一碼字 雖然只有一個字根的字都要補根成為二碼字，但也有只要一個字碼就可以打出來的字，稱為「一碼字」。小寫數字（一到十，加上○）即為此類，另外還有常用的字組成剩下的 15 個一碼字。如： 「一」的字碼是「E」 「對」的字碼是「A」 「有」的字碼是「X」 二碼字 而二碼字除了因補根而成的之外，還有為了減少輸入字根數而成的，一共 26 乘...","categories": ["blog"],
        "tags": ["雜談"],
        "url": "/blog/2021-12-switch-to-boshiamy/",
        "teaser": null
      },{
        "title": "[雜談] 身為工具開發者的二三事",
        "excerpt":"最近終於有機會可以跟到大專案，而專案中有一人負責提供開發工具。為了方便進行 code review，所有成員要使用該工具。但沒有想到才剛使用一週，就遇上開發者大改架構，而且連個事前通知都沒有，一個禮拜的進度化為烏有。崩潰之餘只好來寫一下自己認知中，身為工具開發者時應該要有的觀念。 提供文件 我知道如果工具還在開發中的話，撰寫文件會比較麻煩，因為只要工具一更新，文件就過時了。但是別忘記，可以多利用註解幫忙生成文件，而且只要符合對應的註解格式，IDE 或編輯器也會為工具的 API 加上提示，讓團隊成員能了解函式或變數的用途。工具完成後也可以用 doxygen 等工具生成 API 文件。 例如 C# 可以使用 xml 格式的註解，配合 /// 或是 /** 來撰寫文件註解，而 Visual Studio 就會為函式加上提示 提供範例 範例是說明工具如何使用最有效的手段。每個範例最好只介紹一個功能，配合常見的使用情況，例如：如何發出事件，就用 UI 的按鈕做為例子、如何生成一個物件，就用生成敵人做為例子。除了能夠讓團隊成員容易理解如何使用這個工具，也可以用來驗證自己的設計是否合理，以及測試功能是否正常。 記錄版本與修改 API 更動時常發生，最好能夠用版本來區分改動，並且記錄 changelog。而不是讓團隊成員在合併分支時，才知道工具又更新了，然後伴隨各種崩慣的錯誤訊息。 使用者可以利用版本號確認自己是否使用最新的工具。我習慣 「Major.Minor.Patch」 的格式，只是修正錯誤就增加 Patch 的數字，增加一些功能就增加 Minor 的數字，如果這次的更新會造成使用舊版工具的程式出錯的話，就增加 Major 的數字。要注意的是，對於 Minor 跟 Patch 的版本變更，都應該要相容前面的版本，即不會因更新而報錯。 版本號的簡單說明 而 changelog 應該忠實記錄每個版本做了哪些修改，讓團隊成員能夠知道如何修正程式以跟上最新版本。我覺得 changelog...","categories": ["blog"],
        "tags": ["雜談"],
        "url": "/blog/2022-01-advice-for-tool-developers/",
        "teaser": null
      },{
        "title": "[C#] 類別成員存取關係一覧",
        "excerpt":"本篇用圖表來介紹 C# 類別成員的存取關係，有 private、protected、public，跟跨組件的成員存取，有 internal、protected internal、private protected。以及比較一般繼承與多型繼承中，會取得什麼版本的方法。 類別成員的存取 存取來源 private protected public 自己類別中 :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: 衍生類別中 :x: :heavy_check_mark: :heavy_check_mark: 外部 :x: :x: :heavy_check_mark: 自己類別中 在自己類別中存取的情況是： 在類別定義中，存取類別的成員，如 Test1。 在類別定義中，透過該類別的物件存取成員，如 Test2。 所有 private、protected、public 的成員都可以存取。 public class Bar { private int x; private void Func() { Console.WriteLine(\"Func called\"); } public void Test1()...","categories": ["blog"],
        "tags": ["筆記","C#"],
        "url": "/blog/2022-02-csharp-inheritance-member-accessing/",
        "teaser": null
      },{
        "title": "[影集] Apple TV《基地 Foundation》",
        "excerpt":"   在一個由帝國長久統治銀河的時代中，帝國的主星「川陀」上出現了一名數學教授ー哈里．謝頓。他用「心理史學」預測帝國將在未來衰敗，整個銀河會陷入黑暗時期，人們必須建立一個「基地」來保存科技與文化，以在黑暗時期過後，讓銀河文明能快速恢復。   劇情   影集改編自以撒．艾西莫夫（Issac Asimov）的基地系列小說，第一季的劇情從到銀河邊緣「端點星」建立基地，到基地的第一次危機結束之後。基地的團隊從川陀出發後，劇情分為三條路線，同時推移：   本篇圖片及劇照皆取自 Apple TV 網站及其在 YouTube 上的預告片   蓋兒與哈里      蓋兒因其數學的天賦而受邀成為哈里的助手，是最接近哈里的預測模型的人，知道他的預測是正確的，但哈里因「天機不可洩漏」而不願透露其基地計劃的細節與理由。隨著劇情的推移，會逐漸理解到蓋兒受到沉重壓力的痛苦，跟哈里不被諒解的無奈。   帝國      深信帝國永不滅亡的「白晝」皇帝克里昴十二世在聽到哈里的理論後相當生氣，憤而將哈里與其追隨者流放到端點星。但是帝國境內的情勢開始出現變化，發生的事情都跟哈里的預測相符。繼任「白晝」的克里昴十三世為了避免預測成真，開始「導正」事件的發展。但在這過程中，即使是一脈相傳的複製人王朝也會開始出現岐異，開始擔心帝國的存亡。   基地      基地線則圍繞在守護者ー賽佛．哈定身上。在團隊抵達端點星之初就存在非自然造物「穹窿」，穹窿會發出「零場」，無論人類還是生物都無法接近，但只有賽佛可以不受影響。在基地建立不久，就受到臨近星球，為了報復帝國的安納克利安人的入侵，即基地的第一次危機。賽佛肩負起保護基地的責任，傾全力對抗敵人的攻擊。   在第一季的結尾，三條劇情線都作了收束，劇情拋下的每個疑問都有解答，同時也看到他們在未來有不同的發展，為下一季作了起頭。   觀後感   我覺得劇情的剪輯完美的呈現「天機不可洩露」的精隨，所謂要欺騙敵人就得先欺騙自己人，觀眾也是自己人之一。每次看到驚人的一幕時，都想著為什麼要這麼作，或危機來臨時，這樣作是對的嗎？帶著滿滿的不解，直到後面解答時才豁然開朗。因為基地團隊不知道計劃的細節，所以哈里與蓋兒的劇情線就有著解答疑問的角色。      角色中滿喜歡複製人皇帝的設定，同時會有「黎明」、「白晝」、「黃昏」三個皇帝在位，分別是少年、壯年、老年的克里昴，而在黃昏任期到的時候，會變成「黑夜」，最後會直接被雷射安樂死燒成灰，此後新的「黎明」誕生，而其它皇帝則繼承下個位子。老實說，在看黑夜皇帝（克里昴十一世）最後一天在世的告別行程時，心中有股強烈的哀傷，尤其是最後走到雷射光束下的那一段。而劇情中期的白晝皇帝（克里昴十三世），原本以為他完全抱有憐憫心了，但是少女星之後的事，理解到他內心還是流有克里昴的冷血，對他是喜怒參半。最可憐的莫過於克里昴十四世，一出生就是個「錯誤」的存在，完全沒有克里昴的特點，就是一個無邪的少年，但最後的下場令人痛心。原本想說如果克里昴十三世真的打算改變帝國的統治方式，那就有可能「破解」哈里的預言了。      另外星際科幻的一大看點就是對外星文化的想像，從服裝、手勢、器物的設定來呈現那個星球的文化跟環境。安納克利安人的最偉大狩獵者以及用最古老的樹雕成的弓，代表入侵基地的首領菲拉不容小覷。瑟斯皮斯人的藍眼睛跟他們以礦業為主，同是瑟斯皮斯人的雨果也擁有藍眼睛。少女星上的水源有很多鹽份而且純水很珍貴，所以會用鹽晶製成的容器裝水給皇帝代表對他的敬重。   真得滿喜歡影集的改編，看完第一集就覺得這會很對我的胃口，片頭的音樂跟動畫也很棒。雖然有看過原著小說，但是細節忘得差不多了，只記得大致的走向，看完影集之後就想回去重看一次小說。如果有第二季的話，我會滿期待騾的登場。  ","categories": ["blog"],
        "tags": ["影集","觀後感"],
        "url": "/blog/2022-02-foundation-apple-tv-series-reviews/",
        "teaser": null
      },{
        "title": "[Unity] 設定 Android 不要備份 PlayerPrefs",
        "excerpt":"用 Unity 開發 Android 上的遊戲時，如果有用到 PlayerPrefs 儲存使用者的資料，可能會發現在重新安裝後，這些資料還是存在。這是因為在 Android 6.0 以上的版本，Android 都會自動備份應用程式的資料，在重新安裝後會恢復這些資料。 關閉 Android 自動備份資料 如果要關閉 Android 自動備份應用程式的資料，可以在 Unity 的專案中設定。 開啟 Project Settings → Player → Publishing Settings → 勾選 Custom Main Manifest 編輯新增的檔案 Assets/Plugins/Android/AndroidManifest.xml 在 application 標籤中加入 android.allowBackup 屬性，並設為 false 這樣就完成設定了 補充 在 Android Developers 的文件中有註明，如果應用程式跑在 Android 12 以上的版本，則這個選項不會影響手機之間的資料轉存，也就是說 PlayerPrefs...","categories": ["blog"],
        "tags": ["筆記","Unity"],
        "url": "/blog/2022-04-prevent-android-from-backing-up-playerprefs-unity/",
        "teaser": null
      },{
        "title": "[C#] 用 interface 模擬多類別繼承",
        "excerpt":"最近負責的 Unity 專案中，有很多 UI 有返回的按鈕，而這些按鈕也要可以透過程式觸發。如果為每個 UI 撰寫觸發的函式，一但觸發的邏輯改變，修改會是個大工程。如果為了這個小功能撰寫基礎類別，又顯得大才小用，而且 C# 的類別只能同時繼承一個類別，擴充性也不高。但 C# 類別可以繼承多個 interface，所以就思考能不能讓類別繼承 interface 的同時，也能提供功能，就好像是繼承了一個類別。 實作 作法是利用 interface 指定對象成員，再配合一個 static 類別來擴充 interface 的函式實作，來讓 interface 看起來也能提供功能。 public interface IPressBack { public UnityEvent onBack { get; } } public static class PressBackCaller { public static void PressBack(this IPressBack i) { i.onBack.Invoke(); } }...","categories": ["blog"],
        "tags": ["C#","Unity","筆記"],
        "url": "/blog/2022-05-csharp-simulating-multi-class-inheritance/",
        "teaser": null
      },{
        "title": "[C#] 利用 Attribute 為繼承類別給與不同的 Static 成員值",
        "excerpt":"在專案開發上遇到這樣的問題：每個繼承類別要提供類似的 static 函式，功能差不多，但只有要取用的值不一樣。就在想能不能把 static 函式拉到基礎類別上，但又可以依照繼承類別給與不同的 static 成員值。 如果把 static 函式放在繼承類別上，就得每個繼承類別寫類似的函式。如果把 static 函式放在基礎類別，又不能在基礎類別上取得繼承類別的 static 成員值，因為 static 函式不能宣告為 abstract 或是 virtual，所以基礎類別無法知道繼承類別有那個 static 成員。最後想到的方法是透過 attribute 配合 reflection 來取得繼承類別上的不同 static 成員值。 實作 在專案中，每個 Unity 場景都有一個啟動的程式碼，程式碼會提供對應的場景名稱。在場景載入後，就要執行這個程式碼。所以載入場景跟執行啟動程式碼的功能放在基礎類別上，而對應的場景名稱就在繼承類別上指定。 首先建立一個 attribute 類別用來儲存場景名稱的資訊，並限制 TargetSceneAttribute 只能用在類別上： [AttributeUsage(AttributeTargets.Class)] public class TargetSceneAttribute : Attribute { public readonly string SceneName; public TargetSceneAttribute(string sceneName)...","categories": ["blog"],
        "tags": ["C#","Unity","筆記"],
        "url": "/blog/2022-08-csharp-use-attribute-to-provide-varient-static-member/",
        "teaser": null
      },{
        "title": "[Unity] Unity 2021 LTS - C# 9.0 的新語法",
        "excerpt":"Unity 2021 LTS 也出來好一陣子了，在 2021.2 版後就開始導入 C# 9.0。使用了半年後，發覺 C# 9.0 當中新增的語法可以讓程式碼更加簡潔易讀，整理成本篇來介紹個人常用的語法。 C# 9.0 的支援 Unity 2021 LTS 並非完全支援 C# 9.0 的語法[1]，只有其中一部份可以使用，而如果要使用下面介紹的 init-only setter 跟 record 類型的話，則要再自行新增一個程式碼，檔名我會命名為 IsExternalInit.cs： namespace System.Runtime.CompilerServices { public class IsExternalInit { } } 否則會出現編譯錯誤： error CS0518: Predefined type 'System.Runtime.CompilerServices.IsExternalInit' is not defined or imported 這是因為 Unity 是使用...","categories": ["blog"],
        "tags": ["C#","Unity","筆記"],
        "url": "/blog/2022-10-csharp-9-in-unity-2021/",
        "teaser": null
      },{
        "title": "[閱讀] 月翔《日本戰國這樣讀》",
        "excerpt":"在接觸戰國題材的遊戲後，就一直很想要認識日本戰國時期的歷史，在朋友的推薦下，選擇《日本戰國這樣讀》作為入門。      書中介紹武田、上杉、北條、織田、豐臣、德川這六家在戰國時期的主角，並用便利超商的加盟體系來幫助理解幕府體制下的關係，例如天皇是名譽董事長、幕府將軍是執行長、守護是地區經理等。書中是以各家分章節，縱觀他們在戰國時期的故事，不只有經典的戰役或事件，還有他們如何經營勢力與對那個時期帶來的影響。所以除了為人所知的名將之外，還可以認識到各家是怎麼崛起的，以及是如何沒落或稱霸日本。   因為是以各家視點分章節，所以牽涉到多家的事件，會著重在單一家的歷史。如果要看其它家同時做了什麼事，書中也有標記在各章節提及的部分。也可以搭配書尾的歷史年表一同閱讀，會對各事件有全局的理解。另外可以放一個日本古地圖搭配閱讀，可以幫助了解各家的地盤與戰役位在日本的哪裡。歷史是土地上的故事，有了故事的連結，日後到日本參觀古蹟的時候，應該會更有感覺。  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2023-01-this-is-sengoku-period/",
        "teaser": "/assets/images/blog/2023-01-08-this-is-sengoku-period/cover-image.JPG"
      },{
        "title": "[筆記] 重構專案中的舊元件",
        "excerpt":"在最近參與的遊戲專案中，我負責重新撰寫經過時間累積、充滿不同想法的核心元件。隨處可見複製的程式碼，元件之間交互使用，亦或是為了加新功能而繞路。可以看出每個新功能為了不影響之前的功能，正維持著微妙的平衡。對於負責重寫元件的我來說就好像是在茂密的遠古森林裡一路披荊斬棘，充滿挑戰。就想寫來記錄過程和心得。 重構元件大概是這樣的感覺吧 理解需求 要作重構還是要回歸需求，知道這些元件或這個功能的目的是什麼，這樣在重新設計時比較容易掌握方向。不過萬事起頭難，這也是最痛苦的階段，尤其是靈力不足以通靈出程式的想法的時候。 如果有文件或是之前的開發者還在的話是最好，就可以快速理解它們的作用，找到切入點。但通常不會那麼美好，可能因為趕時限沒時間作文件，或是之前的開發者不在了。這時候就只能自己看程式碼通靈了。 找出運作流程 我會先找出元件在運作流程中的位置，利用 debug 大法先看事件是如何發生。例如想知道攻擊演出是怎麼播放的，就在覺得可能發生的地方插入 Debug.Log，當演出時就可以知道那個地方有沒有被呼叫到。而且 Unity 的 Debug.Log 也會包含 call stack，可以知道發生的起點。 有 call stack 的幫助，可以知道要重構的元件在流程中的位置，與牽涉的哪些元件，例如演出播放會跟素材載入的元件有關，而發起演出請求的元件有哪些等。如果遇到非同步的程式碼就會麻煩一點，得要找出哪裡呼叫到斷點，再從斷點另一頭開始找。有這些資訊就可以拉出這次重構的界線要到哪裡，因為當牽涉到的元件很多時，一次改動太多東西反而不好掌握。 原本的問題是類型 B 的特效生成與管理跟類型 A 完全不同，想見類型 B 的特效是後來新增的 理解程式碼 即使有文件或是有人可以問，要到能有修改想法前，還是得實際看程式碼，痛苦的開始。在拉出重構界線後，就去看目標元件內的功能是如何運作的，重點在於理解需求，也就是它是為了作什麼事情而存在。最好是能抓出元件內每個功能的作用，還有偷偷幫你做的功能，例如是在意料之外的地方做到不會重複播放特效的功能。這樣在重新設計時會有比較好的藍圖。 找出舊架構每個元件的功能和用途，紅色是有問題的使用方式 在理解程式碼的過程中，也會發現原本的功能有什麼問題。例如生成的特效物件沒有統一管理、使用的資料結構有效能問題等。當然在重新設計時，也得一併考慮解決這些問題。 重新設計 有時候在理解功能的時候，也會有想法冒出來，所以不會等完全理解完才開始重新設計。有想法時先設計新的架構大致要長什麼樣，漸漸體悟出功能後，再逐步更新設計。 重新設計是規劃元件之間要如何互動，要提供什麼樣的功能給其它元件使用，目標是讓程式能直覺好讀與方便後續維護。我習慣的設計方向如下： 單向相依性 同一個系統中，元件之間的相依性是單向的。也就是不會繞過使用的元件，再去取用後面的元件，或是元件之間的相依性不該有迴圈，這很常出現在那個元件是 static 的情況下。這樣在後續追縱程式碼時，路徑會比較單純。 以這次的例子來說，應該要把類型 B 的特效管理元件合併進來 只負責一件事 每個元件只負責一件事。如果規劃出來的元件作的事情太多，就可以考慮將它切出來作成另一個元件。好處是命名更容易，可以直覺知道這個元件負責的功能。但也不用為了一個小功能而切出新元件，反而會使程式更複雜。通常在實作時會意識到這個元件太大或太小，在設計階段不用一直考慮切的好不好。 每個元件專心做它負責的事就好 像共用跟個別使用的特效的管理方式不同，就分出次元件來，EffectManager 再依照請求的特效決定（透過 flag 之類的）從哪邊取資料，EffectUser 不用管這件事 只開放需要的功能...","categories": ["blog"],
        "tags": ["筆記","雜談"],
        "url": "/blog/2023-01-refactor-legacy-component-in-project/",
        "teaser": "/assets/images/blog/2023-01-30-refactor-legacy-component-in-project/refactor-is-like.jpg"
      },{
        "title": "[推廣] 空氣魚實驗室",
        "excerpt":"來介紹一下空氣魚實驗室與現有的專案~      YouTube 頻道 - 來做遊戲啊系列   因喜歡 Nier: Automata 中的 9S 的駭客小遊戲而製作。這系列以程式為主，從機制、關卡設置，到 Boss 製作，逐步完成一個 3D STG。除了程式講解外，也分享設計思路。      YouTube 頻道:      來做遊戲啊系列:      Unity 套件 - Circular Scrolling List   Circular Scrolling List 用有限個選單物件來顯示無限個內容，支援直向跟橫向捲動、可用滑鼠及滾輪操作，也可透過程式來控制。      可以在 Unity Asset Store 上下載：         這個月第 6 版上架啦，新加了編輯器預覽、支援兩端停止選單、程式碼控制：               有問題也可以在 Github Page 上提問:        ","categories": ["blog"],
        "tags": [],
        "url": "/blog/2023-03-airfishlab-promotion/",
        "teaser": "/assets/images/blog/2023-03-26-airfishlab-promotion/logo.png"
      },{
        "title": "[閱讀] 今敏《Kon's Tone 「千年女優」之道》",
        "excerpt":"2022 年在高雄電影館看了《今敏：造夢魔術師》這部記錄片才知道今敏導演，之後就對他的作品很感興趣，還買了所有電影的 BD 來看。當時看完記錄片，朋友就借我這本書看，不過因為工作關係，只看了一半就先還回去了，但是意猶未盡，後來就自己再買了一本來看。      《Kon’s Tone 「千年女優」之道》收錄今敏其中兩部作品《藍色恐懼》跟《千年女優》是如何成案，以及製作過程的秘辛，還有收錄幾篇在個人部落格的文章，分享他是如何踏上動畫導演的路，還有人生觀等等。其中分享《藍色恐懼》的製作過程的「《藍色恐懼》戰記」就佔了全書一半以上的內容，從成案開始就遭遇不合理的要求，在製作過程中被製作助理雷到的事情更是層出不窮，真的是充滿「恐懼」的「戰記」，看了人都 blue 了起來。很佩服整個團隊可以在如此艱難的環境下完成《藍色恐懼》，也蠻佩服今敏的脾氣，還可以自嘲地寫出這篇文章。我再看一次電影的話應該會有不同的感覺吧。   成書應該是在製作《東京教父》時。比較可惜的是這本書可能是從簡體中文直接轉換過來的，所以一些用語上還是有差別，在閱讀的時候要稍微思考一下。今敏每部作品都很吸引我，無論是劇情，還是畫面呈現上，他的作品更影響其它了電影，像是我最喜歡的《盜夢偵探》，也影響了電影《全面啟動》。如果你還沒看過他的作品的話，一定要找機會去看。  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2023-04-kons-tone/",
        "teaser": "/assets/images/blog/2023-04-18-kons-tone/cover-image.png"
      },{
        "title": "[分享] 獨立遊戲在 Steam 頁面上的宣傳影片建議",
        "excerpt":"在推特上看到貼文分享一則在 Reddit 的討論串，討論串的樓主問其它人是不是也一樣，在逛 Steam 遊戲頁面時，會跳過宣傳影片直接去看遊戲擷圖或是評論。結果許多人回覆都有類似的習慣，因為覺得宣傳影片沒有傳達出遊戲玩法，所以直接去看遊戲擷圖的話，反而可以更快知道這個遊戲合不合自己的胃口。原推的作者就分享獨立遊戲要如何避免這種情況，讓玩家能在宣傳影片上停留久一點，增加購買或是加入願望清單的機會。 Here&#39;s your wake up call if you have a trailer with a slow intro and lots of logos on your Steam page. This post is full of people who skip past the trailers to click on the screenshots because it&#39;s quicker and they assume the...","categories": ["blog"],
        "tags": ["分享"],
        "url": "/blog/2023-05-slow-trailer-is-not-good-for-indie-game/",
        "teaser": null
      },{
        "title": "[遊戲] 女神異聞錄5 亂戰：魅影攻手 P5S",
        "excerpt":"沒有小兵海、沒有據點兵長、也不會說敵將討伐，P5S 還是承襲著 P5 的風格，不過戰鬥從回合制變成即時戰鬥，原本以為跟光榮合作會變成無雙割草遊戲，沒想到他們把 P5S 變成一款很棒的 ARPG。 我很享受遊玩 P5S 的過程，無論是戰鬥、音樂、畫面風格，這款遊戲完完全全打中我的胃口。即使劇情通關了，還是想繼續把任務解完，體驗戰鬥的快感。 通關時數 55 小時半 感覺在遊戲業工作後，玩遊戲會注意的地方就會比較不同，所以就想要來分析這款遊戲為什麼會這麼吸引我，以及當中的設計。另外本篇的遊戲擷圖中，因為是在通關後拍的，所以有把一些可能會劇透的地方遮起來。 戰鬥機制 遇敵 遇敵的機制跟 P5 一樣，在監獄中會有敵人在走動，要接觸敵人才會觸發戰鬥。 如果從背後偷襲敵人，戰鬥會以「優勢」開始，敵人一開始會無法行動。反之如果被敵人撞見，戰鬥會以「劣勢」開始，一開始角色會陷入暈眩的狀態。鼓勵玩家維持「怪盜」的作風，這跟無雙類型遊戲，角色就是要衝入敵陣大殺四方完全不同。不過提高監獄警戒度並非完全是壞事，在這樣的情況下，會比較容易遇到「寶魔」，擊倒它能獲得大量的金錢。 監獄中會有可躲藏的位置，用來發動偷襲 成功發動偷襲對戰鬥有優勢 戰鬥 P5S 採用即時戰鬥，讓整個遊戲的節奏變快了，配合無雙遊戲經典的「輕連擊-重收尾」的操作模式，讓攻擊也有一種「節奏」。有攻擊就有閃躲，如果在被打到的瞬間按下閃躲，就會自動反擊，讓攻擊接續下去，這是個人覺得讓即時戰鬥刺激的要素之一。 (閃躲成功的圖我截的到嗎) 每個角色的攻擊節奏不一樣也是有趣的地方，在輕攻擊動作的過程中無法再輸攻擊指令，因此不能一昧狂按攻擊，而且 Sophia 更要求要正確的時間點按下攻擊 (Just Catch) 才能接續連段。能夠掌握攻擊節奏，避免被敵人偷刀，適當的放重攻擊收尾，在 Boss 戰中格外重要。 都跟光榮合作了，不免俗的還是會有無雙的戰鬥模式，在 P5S 中是以特殊關卡的方式呈現。在需要 Navi 駭入機關的場合中，會有一波波敵人向 Navi 攻擊，玩家就要在這段駭入時間中擊敗敵人海，保護 Navi 以免她被擊倒。 (放 Navi 的關卡樣式) 總攻擊與 Show Time 敵人身上擁有倒地值，透過屬性相剋的攻擊或是附加攻擊都會削減倒地值。如果倒地值歸零，玩家就可以發動總攻擊，造成大量傷害。在...","categories": ["blog"],
        "tags": ["遊戲","心得"],
        "url": "/blog/2023-06-persona-5-scramble/",
        "teaser": null
      },{
        "title": "[筆記] 將共用的資料定義獨立出來",
        "excerpt":"當不同元件有相似的資料時，應該把相同的部份整理出來成為一個獨立的資料定義，並在用到的地方使用這個資料定義。如果元件之間各自定義的話，當要新增或修改資料時，所有用到的地方都得要一併更新，既秏時又費力，且容易出錯，會是一場災難。 資料各自定義的問題 例如在程式中有個代表玩家資訊的資料，在玩家物件、公會成員、排行榜中都有用到： public class PlayerData { public string Name; public uint AvatarId; public uint Level; public uint ExperiencePoints; } public class GuildMemberData { public string Name; public uint AvatarId; public uint Level; public GuildRole Role; } public class LeaderboardPlayerData { public string Name; public uint AvatarId; public uint Level;...","categories": ["blog"],
        "tags": ["筆記","C#"],
        "url": "/blog/2023-08-extract-common-data-definition/",
        "teaser": null
      },{
        "title": "[閱讀] Alix Christie《古騰堡的學徒》",
        "excerpt":"買書總是比看書還快，買了還沒看的書只會越來越多。雖然是幾年前買的，但還記得當初是在誠品敦南店購入的，因為聽聞全世界第一間 24 小時營業的書店就要關了，於是趁著到台北參加活動的機會，去書店買了幾本書，這本就是其中之一。      古騰堡是歐洲地區第一位發明活字印刷術的人，而這本小說是以「古騰堡的學徒」ー彼得．薛佛為主角，第一位偉大的印刷師傅。在 15 世紀，書籍的製作主要靠抄寫員來撰寫文字，而出版的書籍又以宗教書籍為主，撰寫的文字就是在傳達神的話語，因此抄寫員在當時是很神聖的職業。而彼得原本也是抄寫員出生，但在成為一名出色的抄寫員之前，卻被養父約翰尼斯．法斯特叫回美因茲。理由是古騰堡開發出活字印刷的技術，而法斯特做為出資人，要求彼得在古騰堡門下學習這項新術，並監視古騰堡。因為手抄是一項神聖且藝術的事情，彼得起初視活字印刷術為「惡魔的行為」，如此直接複製神的話語，而沒有靈魂的文字。   小說的故事就由彼得加入古騰堡的印刷工坊開始，到成功印製出舉世聞名的「古騰堡聖經」為止。描述彼得從抵抗這項技術，到利用身為抄寫員的美感，幫助設計文字，還有改進這項技術。為了保護這項技術，尤其可能被視為瀆神的行為，因此印刷工坊在聖經印製完成之前，只能低調進行。期間又遭遇許多困難，整個過程相當坎坷。    第一頁有著日星鑄字行的鉛字印刷   看完小說覺得最有趣的是，原來在當時手寫是一項相當重要的工作，而且還有精神上的意涵。而活字印刷可以快速完成一本書、減少手抄的失誤、加速知識的傳遞，無疑會對時代帶來巨大的改變，卻是一項惡魔的技術。就好像 2023 年正在經歷的 AI 生成內容崛起，也是興奮與恐懼交雜。人類透過時間與心力製作出來的藝術品，被拿去做機器學習訓練後，軟體便能快速產出。目前我不太能接受 AI 生成內容，但不禁好奇十年、二十年後，再回來看這項技術會有什麼想法。  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2023-08-gutenbergs-apprentice/",
        "teaser": "/assets/images/blog/2023-08-12-gutenbergs-apprentice/cover-image.jpg"
      },{
        "title": "[閱讀] 小島秀夫《創作的基因》",
        "excerpt":"《創作的基因》收錄小島秀夫對看過的小說與影視作品所寫下的心得文章。對小島來說，透過閱讀與觀影能帶來平常沒有的「體驗」，體驗到來自不同世界的精神，認識到更多的想法。這些作者透過創作出作品這個「MEME」，將自己的想法傳達給它人，從而讓受到影響的人創作出更多的「MEME」傳承下去，構成「創作的基因」。這本書就是收錄這些影響小島的「MEME」。      小島到現在無論有多忙都還是會跑書店，親手翻書，喜歡就買，憑自己的眼光找到「中獎」的書籍。透過這個過程塑造出個人的品味，進而化為有創意的作品。《創作的基因》收錄了應該有三四十個作品。沒想到小島秀夫能對這麼多小說、影視作品有共感，有些是受父親影響或要求而看的作品，有些是跟小時候的生活經驗有關，有些則是泡在書店找到的「中獎」書籍。科幻與偵探作品佔多數，我想這就是小島喜歡的類型，也影響遊戲風格的原因吧。   閱讀的過程雖然漫長，但為了融入書中，在這過程中要發揮對書中人物、場景、情節的想像力，將抽象的文字化作腦內具體的畫面，就是「創作」的一種。我覺得不同的人閱讀同一本書，體驗會有些微的不同，這些不同可能來自於讀過的作品，看過的電影，或是生活經驗，這就是閱讀的魅力。而把閱讀後的心得寫出來也是一種「創作」，挖掘內心的想法，透過文字將自己的感受具體地表達出來。閱讀故事讓人經歷一到二次的創作，還有可能再創造出自己的故事，這就是「創作的基因」的傳遞吧。  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2023-10-the-gifted-gene-and-my-lovable-memes/",
        "teaser": "/assets/images/blog/2023-10-07-the-gifted-gene-and-my-lovable-memes/cover-image.jpg"
      },{
        "title": "[雜談] 程式專案的一人負責與多人協作",
        "excerpt":"之前的工作模式偏向個人負責一個專案或一個完整的功能，跟別人的互動主要是確認需求、處理反饋。現在的工作參與專案的規模則大上許多，一個元件或功能會由不同人接手，模式跟以往大不相同。這兩個月因為專案上線，所以從系統架構的工作轉去支援功能的維護。這段時間體驗到許多觀念衝擊，就在思考為什麼會如此適應不良。 差別 我想這兩者最大的差別就是需不需要去改變自己的工作模式。跟不同領域的人合作時（如企劃與美術），主要專注在功能的規格上，至於要如何在程式上實現，則可以依自己習慣的方式去完成。但如果是跟同是程式的人合作的話，尤其參與時專案已經進行一陣子了，就得要依循既有的工作模式了。 自己做可以不受限制，但多人協作就得配合他人了 如果有特別規定，則還可以依循規定去調整工作模式，像是縮排用 tab 還是 space、類別框架、分支命名等。但如果沒有的話，就得要照著前人的 coding style 去撰寫，配合這些「潛規則」。像是覺得用 switch-case 做條件判定比較好，但如果前人已經用一連串的 if-else 來判定，就只能再加新的 else 上去。或是因為習慣用垂直分割一次看兩份程式碼，因此設定在 80 字元後會換行，但原本程式碼在 120 字元才換行，甚至一行寫到底的話，較短的換行就會顯得突兀。 不同的 coding style 會讓程式碼不協調 如果為了 coding style 去改別人的程式碼，則可能會讓責任到自己身上。因為功能出錯時，會先找最近一次的 commit 者是誰。而且專案已經運作一陣子的話，改動功能正常的地方，可能會有風險。 溝通 但也不是就此束手無策，還是可以透過溝通來改善這樣的情況。像是推薦工具外掛來改善程式碼排版，例如可以在存檔時把行尾空白去除的 Trailing Whitespace Visualizer，還有顯示換行字元位置的 Editor Guidelines，最後設定換行區間在 80 到 120 字元。再進一步的話，也可以導入 lint 工具跟 git hook，來統一 coding style。 雖然現在還處在適應轉換期，確實因為觀點不同帶來蠻大的低潮，而且要習慣不同的 coding...","categories": ["blog"],
        "tags": ["雜談"],
        "url": "/blog/2023-10-collaboration-of-programming/",
        "teaser": null
      },{
        "title": "[閱讀] 石川祐基 - 解構鐵道文字設計",
        "excerpt":"不知道從何時開始，就一直對鐵道很有興趣，去日本都會拜訪當地的鐵道博物館，或是搭乘比較獨特的鐵路路線，偶爾看到列車經過平交道時，也會想拍下它行經的過程。但是對於車站內的站牌卻沒有特別留意，在快速取得上面的資訊後，就沒有再看過一眼了，直到我在書店遇到這本《解構鐵道文字設計》。      《解構鐵道文字設計》介紹日本各地鐵道站點的文字設計，從大家比較熟知的 JR、都營地下鐵，到江之島電鐵、越前鐵道等地方鐵路。範圍從站名牌、指示牌，到商標應有盡有。書中不只詳細介紹站名牌、指示牌所使用的字體，還有訪問到設計的公司，講解排版、裝飾等設計目地，如何達到易讀又能兼顧美感。另外收錄地下鐵站名牌的進化，可以一窺從充滿懷舊感轉換到現代化設計，最後還有風格獨特的站名牌特輯。     書中詳細介紹站名牌的設計概念，看完後對站名牌肯定有不同的看法    今年去江之島玩時，看到跟點心麵合作的站名牌，覺得有趣就拍下來了   自認算輕度鐵道迷的我，每次去日本玩最期待的就是搭乘鐵路運輸。今年九月去江之島真的是大滿足，從大船站搭乘湘南單軌電車到湘南江之島站，這條路線是懸垂式單軌列車，軌道隨丘陵地起伏，有如雲宵飛車。還搭乘江之島電鐵到鎌倉高校與鎌倉大佛，路線沿途可以一覽海景，另外在腰越站與江之島站之間還行駛在馬路上，有如路面電車。書中就有介紹到湘南單軌電車獨特的站名牌設計，這趟沒有注意到實在可惜。不過再訪日本時，我就會特別留意鐵道的文字設計了！    湘南單軌電車，軌道就在上方     江之島電鐵一看就可以認出來，車身與車站牌基底都是墨綠色  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2023-11-dive-into-font-design-in-train-station/",
        "teaser": "/assets/images/blog/2023-11-05-dive-into-font-design-in-train-station/cover-image.jpg"
      },{
        "title": "[電影] 2023 年進電影院看過的那些電影們",
        "excerpt":"回想去年看的電影比起以往還要來得多，沒想到也漸漸喜歡看電影的感覺。就想來記錄去年看過的電影，以後也可以回味喜歡的作品。 捍衛任務 4 這系列從第 1 集看到第 3 集，也終於迎來結局。最喜歡在廢棄房屋中，以 top-down 視角拍攝的戰鬥場景。流暢的運鏡，搭配龍息霰彈擊發時噴射出來的火焰，從上方看著 John Wick 從一個房間打到另一個房間，視覺一大滿足。另外沒想到飾演先驅者的 Clancy Brown，就是《刺激 1995》的警備隊長，兩者之間的氣場完全不一樣。可惜看得出基哥體力不如以前，肢體打鬥顯得單調。劇情上越來越多過場角色，防彈西裝也人人都有。而且這系列對上的主要敵人最後都讓人感覺只是個小屁孩。 龍與地下城：盜賊榮耀 2023 年最喜歡的電影就是這一部了！整部電影就像是在跑團，演員們在開拍前還跟導演跑過一場 D&amp;D 來加深對角色的印象。雖然有玩過 TRPG，但沒有跑過 D&amp;D 系統，但同行的朋友說，電影中的場所、怪物、法術完全是 D&amp;D 裡面的設定。所有角色中最喜歡 Doric，可以算是整個冒險的 MVP 了，能變形成各種生物，變大可以擊退敵人，變小則可以潛入，而且演員也很可愛。電影中有一段逃離追擊的過程，看著 Doric 流暢地變形成各種不同的生物來躲避攻擊、穿越障礙，讓人感到非常過癮。 超級瑪利歐兄弟電影版 偏粉絲向的作品，看到熟悉的場景出現，像是開頭的 World 1-1、對上 Donkey Kong 的名星大亂鬥場地、瑪利歐賽車等，就比較不會在意劇情不通順了。還蠻喜歡開場設定瑪利歐跟路易吉在現實世界只是普通的水電工，還得要拍廣告來招攬生意（這一段廣告做的很棒），好不容易接到生意，卻又花式搞雜。 Blue Giant 身為爵士樂的喜好者，當然是不能錯過這部以爵士樂為主題的動畫電影。當初日本在 2 月上映時，就很期望台灣也能上映，看到消息真的非常高興。在上映前，Spotify 上的原聲帶早以聽了無數次，上原廣美的編曲實在迷人。電影開場第一首 Impression 出來時，眼淚就忍不住掉下來了，果然在有好的電影院設備聽爵士樂是一大享受。雖然演奏的演出是用 3D 呈現，會讓人有點出戲，而且比較沒有力量，但我想這是為了演奏到位而做的取捨。不過最後玉田有一段鼓的 solo 完全是手繪，就可以完全感受到演奏的張力，看完又哭了一次。劇場版也補足原作漫畫劇情的缺憾，是我第二部...","categories": ["blog"],
        "tags": ["電影","觀後感"],
        "url": "/blog/2024-01-watched-movies-in-theater-in-2023/",
        "teaser": null
      },{
        "title": "[電影] 2023 年在家裡看過的那些電影們",
        "excerpt":"2023 年除了在電影院看了許多電影外，也透過 Netflix 等串流平台收看了經典以及想要補齊的電影。就用這篇來整理這段時間的心得。 今敏的動畫電影 前年看過《今敏：造夢魔術師》後才認識這位動畫導演，知道他的作品影響其他電影導演，可以在他們的電影中看到今敏作品的影子。看完這部紀錄片後就對他的作品非常感興趣，就下訂四部動畫電影的 BD 了，就為了能一看再看。這四部作品風格與劇情走向完全不同，但每一部內容毫不馬虎且令人印象深刻，知道他已經年紀輕輕就過世時覺得非常可惜。 藍色恐懼 之前就有聽說《藍色恐懼》是部心理驚悚類型的電影，對恐怖電影沒有抗性的我，真慶幸自己選早上來看這部電影。女主角未麻從偶像轉為演員後，就一直遭受未知的粉絲騷擾，另一方面又與過去的自己拉扯，逐漸對自己轉戰演員這個決定感到迷惑。電影把未知恐懼還有心理壓力營造的很好，可以感受到整部電影詭譎的氣氛。在進入解明階段後，才發現原來還有一層真相，把之前對劇情的理解完全推翻，看到這裡時感到非常驚訝。尤其電影最後未麻在車內對後照鏡講的那句話，更是耐人尋味。BD 有附錄今敏對電影的訪談，談到電影中場景隱含的未麻心理狀態。另外也一直呈現「看與被看」的關係，玻璃就是之間的界線，未麻與水族箱裡的魚、房間與窗外世界，甚至到觀眾與劇情，這也是電影中值得注意的地方。 千年女優 《千年女優》是戲中戲類型的電影。劇中立花導演為了拍攝傳奇女星，同時也是自己的偶像—藤原千代子的紀錄片，而到她隱居的地方拜訪。電影以立花導演帶來的一把鑰匙貫穿整部劇情，就從這把鑰匙開始，回憶起過去的種種。或許千代子年紀大了，把自己的記憶跟拍攝過的電影劇情混在一起了，但沒想到的是立花導演跟他的助手也被捲入到劇情裡面了。每一段跟電影混雜在一起的回憶，千代子都在尋找當初給她這把鑰匙的那位男子，但男子同時受到壞人的追捕，每次都是立花導演扮演的角色挺身而出，排除阻礙。每一段回憶就像一個輪迴，雖然時空不同，但是主要人物與過程卻十分相似，一路從戰前到上太空，千代子總是在追尋那位男子。有時是回憶劇，有時突然來個導演喊卡，才理解這段是現實，這種似夢非夢的敘事方式，稍一不注意就會跟不上。電影結局的意涵，讓情緒完全爆發出來，最好是多準備幾張衛生紙。 東京教父 《東京教父》充滿聖誕節奇蹟，還有如親情般的溫暖氛圍，是最適合在聖誕節看的電影之一了。三名留宿街頭的流浪漢—阿仁、小花、美由紀，在聖誕節前夕撿到一名棄嬰，因為不忍嬰兒被遺棄，於是踏上找尋其生父母的路。一路上的遭遇，逐漸道出三名流浪漢的過去，以及他們對「家庭」的價值觀與衝突。雖然他們都在冷颼颼的戶外，但越看心裡越覺得溫暖，算是今敏作品中最能直覺理解的一部了。劇情一樣毫不馬虎，每位角色的個性也很分明，當中也不乏幽默感。最喜歡流浪漢與小屁孩們打架的場景，後面辦公大樓一排房間的燈，呈現兩方的體力狀態，就跟格鬥遊戲沒兩樣。 盜夢偵探 與前面的作品不同，《盜夢偵探》就偏向科幻電影了。研究所的森啟發明的「DC 迷你」可以具現化人類的夢境，但長期使用儀器卻會使人分不清現實與夢境，而且還可以植入別人的夢境到其他使用者身上。然而研究所內的 DC 迷你被竊，主角千葉博士為了防止被拿來犯罪，開始追查兇手，甚至進入夢境中調查。很喜歡今敏能夠如此具體呈現夢境的無厘頭，像是原本看著的人，下一秒就是自己，或是跑不完的長廊，抑或是講著毫無邏輯的話，下一幕就呈現話中的場景。如果有看過《全面啟動》的話，就會發現這兩者之間有相似之處。算是四部作品中最喜歡的一部。 亨利．休格的神奇故事 改編自羅爾德．達爾德《亨利．休格和其他六人的精彩故事》，由魏斯．安德森導演的喜劇電影，在 Netflix 上映書中的四個故事《亨利．休格的神奇故事》、《殺鼠之鼠》、《心腹之毒》、《天鵝之翼》。魏斯．安德森是我喜歡的導演之一，他的風格強烈，場景對稱、用色鮮明、角色演出方式，讓他的作品有「魏式美學」之稱。這系列的作品的特色是角色在做事的同時也會講出他正在作的事，或是在講完別人會做的事後，那個角色做出對應的行為，就像口述影像。有時其他角色還會疑惑地看著正在講故事的角色，想著這個人在幹嘛。另外有趣的是，角色幾乎一直面對觀眾，但透過站位來表達之間的關係。而場景佈景就像舞台劇機關，隨著劇情推進，佈景會被移出移入，也會有小幫手幫忙佈置前景道具。雖然是看影像，但感覺是在看一本立體有聲書，這就是魏斯．安德森的作品吸引人的地方。 玩命再劫 《玩命再劫》（Baby Driver）的主角 Baby 是搶罪集團的車手，負責接應做案同夥到現場與逃離追捕。主角因為小時候耳朵受過傷，所以經常帶著 iPod 聽音樂以抑制耳鳴聲，而他聽的音樂就會是那一段的背景音樂。看《玩命再劫》最過癮的就是每個動作場景都有對上音樂的鼓點，不僅僅只有演員的動作，連跟週遭物件的互動也都會對上音樂。像是電影開場的搶案，一開始還以為只有主角去對上正在聽的音樂，再看一次才發現同夥開門、拿東西的動作也有對上節拍，甚至飆車經過柱子的風切聲也配合著鼓點。還有主角買咖啡回程的路上經過的塗鴉是在聽得歌曲的歌詞。我很喜歡電影中透過小動作來傳達主角的個性，像是主角對殺人感到害怕，所以開場同夥舉槍對人時，還緊張地把墨鏡拿下來看。執導的 Edger Wright 也是我喜歡的導演，他的《血與冰淇淋三部曲》與《歪小子史考特》也在我最喜歡的電影名單中，尤其是《歪小子史考特》是必看電影之一。 終極警探 「Yippee ki-yay, MDFK.」在朋友強力推薦下，在聖誕節看了這部經典的聖誕節電影。主角紐約警探約翰．麥克連為了挽回與妻子霍莉逐漸殊遠的關係，趁聖誕節假期到洛杉機，前往妻子任職的公司所舉辦的晚宴探望她。卻沒想到中途一群武裝恐怖份子闖入公司，為了取得數億元債券劫持所有人。然而約翰趁亂逃離現場，開始個個擊倒這群恐佈份子。這部電影令我驚訝的地方就是整個劇情的時間跨度就只有一個晚上，卻毫無冷場。約翰的獨自對抗、恐怖份子的無情、媒體的噬血、當地警方的無能，每一方的對比明顯，整場就看著約翰如何支身對抗敵人。開頭那一句就是約翰對恐怖份子說的經典台詞。當時的英雄動作片流行是像史特龍那樣的肌肉男主角，但主演這部電影的布魯斯．威利反而沒有如此壯碩，卻呈現出「是一個遇到極端險境而誕生的平凡英雄」。另外沒有想到飾演恐怖份子首腦的演員是艾倫．瑞克曼，也就是在哈利波特飾演石內卜的演員，在《終極警探》中完全認不出這是他年輕的樣子。 醉好的時光 在《死亡擱淺》深深地被麥叔的氣質給吸引後，就一直很想補他有演出的電影，《醉好的時光》就在我的片單中。電影裡四位學校老師在學校遭遇挫折，被評論教課無趣。於是嘗試實驗透過控制血液中的酒精濃度，來驗證在微醉的狀態下，表現反而會更好的理論。在之前看到麥叔的訪談影片中，他提到為了讓表演更真實，演員們還事先舉辦體驗營，錄下自己真的喝醉時的表現作為參考。乍聽之下是喜劇電影，但更深的是中年不被認同的危機感，到後段進入爛醉實驗階段後，情況反而急轉直下，甚至當中有人無法自拔而發生悲劇，越感沈重。電影結尾麥叔邊跳著舞邊與慶祝畢業的高中生喝酒的一鏡到底的片段，搭配著 Scarlet Pleasure 的《What A Life》，是電影的經典一段。只是最後看到這一段時，不知道自己是該高興還是該哀傷。 極地 在《極地》中，麥叔釋演一名過著退休生活的殺手，但前雇主找來一群年輕的殺手來斬草除根。麥叔這邊的劇情用沉穩、色調偏暗的風格進行，讓人覺得他是一位資歷豐富的殺手；而年輕殺手的劇情則是使用節奏強烈的音樂、嘻鬧、色調明亮的風格進行，呈現出他們的自信與自大。但這兩者間直接切換讓情緒不能連貫，就好像乘著一台車，原本在公路上穩穩地開著，忽然間大甩尾，接著開始飆山路，過一陣子又跑回公路上，乘客也只能暈車了。不過在這當中，看著麥叔的演技是很令人享受，舉手投足間就可以感受到角色的氣場。 全面啟動 老實說我到 2023...","categories": ["blog"],
        "tags": ["電影","觀後感"],
        "url": "/blog/2024-02-watched-movies-at-home-in-2023/",
        "teaser": null
      },{
        "title": "[Unity] 事件訂閱與問題（上）- `UnityEvent` 與 C# `event`",
        "excerpt":"在遊戲開發中，一個物件經常需要訂閱另一個物件的事件，以在事件發生時，執行對應的動作，像是玩家輸入、觸發機關、關卡管理等。而在 Unity 中，常見的方式是使用 UnityEvent 與 C# event 來讓物件提供事件介面，讓其它物件訂閱，但這兩者各自問題，反而讓程式容易出錯。本篇文章整理 UnityEvent 與 C# event，並講解可能的問題，而下篇則會介紹利用 C# 介面做為事件介面的第三種方式。 UnityEvent UnityEvent 在 Unity 中是最常見的訂閱事件方法，好處是讓其它物件可以在 inspector 上直接設定事件的處理函式（event handler）。通常在設計套件時，會經常使用 UnityEvent 來讓使用者可以從介面設定處理函式，但這也是 UnityEvent 的唯一好處了。 public class LevelManager : MonoBehaviour { [SerializeField] private UnityEvent _onLevelStart; } UnityEvent 的問題 讓訂閱的物件提供過多的 public 函式 使用 UnityEvent 的一個大問題就是想要訂閱事件的物件得要提供 public 函式才能在 inspector 中設置處理函式，這會讓其它物件也有機會去呼叫這個處理函式。 public...","categories": ["blog"],
        "tags": ["筆記","Unity","C#"],
        "url": "/blog/2024-04-unity-event-subscription-and-problem-1/",
        "teaser": null
      },{
        "title": "[Unity] 事件訂閱與問題（下）- C# 介面",
        "excerpt":"本篇繼續上一篇的內容來介紹第三種事件訂閱的方式：C# 介面。並在最後比較這三種訂閱方式。 C# 介面 使用 C# 介面讓物件提供事件的處理函式，並把物件註冊到事件系統上以訂閱事件。在 Unity 的 EventSystems 中就是使用 C# 介面讓物件訂閱操作事件。 public class UIPuzzleImage : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler { public void OnBeginDrag(PointerEventData data) { Debug.Log(\"OnBeginDrag\"); } public void OnDrag(PointerEventData data) { Debug.Log(\"OnDrag\"); } public void OnEndDrag(PointerEventData data) { Debug.Log(\"OnEndDrag\"); } } 實作事件系統 使用 C# 介面做為事件訂閱的方式，還需要自行管理訂閱的物件，以觸發事件。這邊使用 HashSet 來儲存訂閱的物件，好處是就算物件重複訂閱，在...","categories": ["blog"],
        "tags": ["筆記","Unity","C#"],
        "url": "/blog/2024-04-unity-event-subscription-and-problem-2/",
        "teaser": null
      },{
        "title": "[閱讀] 布莉琪．柯林斯《裝幀師》",
        "excerpt":"當回憶可以被「裝幀」到書中，自此忘卻這段痛苦的經歷，從而開始新的人生，對一個人來說或許是救贖。但如果被有心人用來裝幀受害者的回憶，抑或是這些不想記起的回憶成為收藏家的玩物時，這童話故事般的能力對被裝幀的人來說是慈悲與救贖，還是自私與痛苦。   主角艾墨特天生擁有裝幀師的能力，但是生長的地方卻把書視為詛咒之物，碰到書只有挨打的份。然而艾墨特生了一場重病，才發現患有「裝幀師熱」，家人在萬般不願意之下，只能將他送到裝幀所當學老裝幀師ー瑟芮狄絲ー的學徒。雖然艾墨特在成為學徒後，症狀逐漸改善，瑟芮狄絲卻遲遲不教導他關於「裝幀」的技術。隨著日子推移，艾墨特發病時會夢到的景象也越來越清晰，然而卻發現這個夢似乎是解答自己遭遇的關鍵，這背後隱藏著更大的事件。   一個故事讓人想要繼續閱讀，就是因為有許多問號等著解答。在知道解答時，會有種「原來是這樣啊」的感覺，但《裝幀師》在解答問題的時候，則是讓人有「什麼！居然是這樣」的感覺。意識到原來前面只知道真相的一半，對劇情的認知是錯的，每個人物看似平常的行為，其實背後都是有原因的。當初進入解答的篇章時，還一直來回對照前面的劇情，看得速度也越來越快，就是希望快點知道整個事件的全貌。   《裝幀師》故事分成三個篇章，舖陳與事件篇、解答篇、解決篇，個人覺得解答篇是全書的高潮，但進入解答篇之前放的劇情高點更是畫龍點睛，從這裡才意識到「有什麼認真的要來了」。而解決篇也很有趣，是從另一個人的觀點繼續把故事延續下去，同時也在收束前面的伏筆。在看之前，原本以為《裝幀師》是奇幻故事，看了才發現是一個充滿人心黑暗的故事。  ","categories": ["blog"],
        "tags": ["閱讀","觀後感"],
        "url": "/blog/2024-07-the-binding/",
        "teaser": "/assets/images/blog/2024-07-07-the-binding/cover-image.jpg"
      }]
